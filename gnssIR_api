#!/bin/bash
#
if [ "$#" -eq 0 ]; then
  echo please see https://github.com/kristinemlarson/gnssIR_api
  echo 
 exit
fi


running_local=true
running_local=false

if [ "$running_local" = true ]; then
  echo running local
  heroku="http://127.0.0.1:5000/api"
  heroku0="http://127.0.0.1:5000/api"

else
  echo not running local
  heroku="https://gnss-reflections.org/api"
  heroku0="http://trywithgps2.herokuapp.com/api"
fi

#
# define a new output directory if you like. This one assumes you will put the results in
# the directory below where you are running this code.
outputdir='./solutions'
#
# defaults for elevation angles (degrees), Reflector Heights (meters) and frequency
# h1 should never be less than 0.5
e1=5
e2=25
h1=0.5
h2=7
freq=L1
# these are defaults
pk2noise=4.0
amp=5
rinex=None
# declare these variables so they are integers
declare -i azim1=0
declare -i azim2=360
declare -i doy_end=0
declare -i doy=0
# This variable just sends output to the screen. Even if you don't set it there will be a daily
# average file created 
snow=False
#
# I am new to bash scripts - so .... 
# As long as there is at least one more argument, keep looping
declare -i k=0
while [[ $# -gt 0 ]]; do
    key="$1"
    k+=1
    #echo key is $k $key
    if [ "$k" -eq 1 ]; then
      station=$key
      shift
    elif [ "$k" -eq 2 ]; then
      year=$key
      shift
    elif [ "$k" -eq 3 ]; then
      doy=$key
      shift
    else
       case "$key" in
        # This is a flag type option. Will catch either -f or --foo
        -f|--foo)
        FOO=1
        ;;
        # This is an arg value type option. Will catch -o value or --output-file value
        -o|--output-file)
        shift # past the key and to the value
        OUTPUTFILE="$1"
        ;;
        -e1|--min-elev-file)
        shift # past the key and to the value
        e1="$1"
        ;;
        -e2|--max-elev-file)
        shift # past the key and to the value
        e2="$1"
        ;;
        -h1|--min-refl-ht)
        shift # past the key and to the value
        h1="$1"
        ;;
        -h2|--max-refl-ht)
        shift # past the key and to the value
        h2="$1"
        ;;
        -freq|--frequency)
        shift # past the key and to the value
        freq="$1"
        ;;
        -amp|--amplitude)
        shift # past the key and to the value
        amp="$1"
        ;;
        -azim1|--min-azimuth)
        shift # past the key and to the value
        azim1="$1"
        ;;
        -azim2|--max-azimuth)
        shift # past the key and to the value
        azim2="$1"
        ;;
        -doy_end|--doy_end)
        shift # past the key and to the value
        doy_end="$1"
        ;;
        -rinex |--rinex)
        shift # past the key and to the value
        rinex="$1"
        ;;
        -pk2noise |--pk2noise)
        shift # past the key and to the value
        pk2noise="$1"
        ;;
        -snow|--snow)
        shift # past the key and to the value
        snow="$1"
        ;;

        *)
        # Do whatever you want with extra options
        echo "Unknown option '$key'"
        ;;
    esac
    # Shift after checking all the cases to get the next option
    shift
  fi
done

echo rinex is $rinex

ok=0
if [ "$freq" == "L1" ] || [ "$freq" == "L2" ] ; then
  ok=1
  echo You have chosen a legal frequency, $freq
elif [ "$freq" == "L5" ] ; then
  ok=1
  echo You have chosen a legal frequency, $freq
elif  [ "$freq" == "L1L2" ] || [ "$freq" == "L2C" ] || [ "$freq" == "L1L2CL5" ]; then
  ok=1
  echo You have chosen a legal frequency, $freq
fi

if [ $ok -eq 0 ]; then 
    echo $freq illegal frequency input, exiting
    exit
fi
# check doy
if [ $doy -gt 0 ] && [ $doy -lt 367 ]; then
   echo This is a legal day of year
else
   echo This is an illegal day of year.
   exit
fi
# check year
if [ $year -ge 2000 ] && [ $year -lt 2025 ]; then
    echo This is a legal year although the year you chose might be in the future
else 
    echo This is an illegal year.
    exit
fi

# check h2 
if [ $h2 -gt 25 ] ; then
    echo The max reflector height you have chosen is too big for the API.
    echo It must be less than 25 meters. For a typical unobstructed site the 
    echo reflector height minimum should be 0.5 meters.  For other sites you 
    echo might restrict the choices to eliminate soil, e.g. you want to only
    echo see water reflections.
    exit
fi
# make sure the output directories are there
if [ ! -e "${outputdir}" ]; then
    echo "making output directory "
    mkdir "${outputdir}"
fi

# make sure the output directories are there
if [ ! -e "${outputdir}/${station}" ]; then
    echo "making station output directory "
    mkdir "${outputdir}/$station"
fi

if [ ! -e "${outputdir}/${station}/${year}" ]; then
    echo "making station year output directory "
    mkdir "${outputdir}/${station}/${year}"
fi


# if not set, have doy_end be the same of doy, 
if [ $doy_end -eq 0 ]; then
   doy_end=$doy
fi

# output for daily averages
comboFile=${outputdir}/${station}_RH_all.csv
echo Combination File $comboFile
echo Day of Year End is $doy_end
echo Look for solutions in the $outputdir directory

# name for the script that calls the API
scriptname=xit.${year}.${station}
# name for the temporary output

echo CHOICES THAT WILL BE SENT TO THE GNSS-IR API
echo Station $station
#echo Year $year
#echo Day of Year $doy 
echo Elevation Angle choices $e1 $e2 
echo Azimuth Angle choices $azim1 $azim2
echo Reflector Height restrictions $h1 $h2 
echo Frequency choice $freq	
echo Amplitude $amp
echo Peak to Noise $pk2noise
#echo End day of year $doy_end

while [ $doy -le $doy_end ] ; do
  rm -f out.json
  echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
  echo Analyzing Station $station Year $year Day of Year $doy
  dailyname=test.${year}.${station}

# calculate string doy with exactly three characters
  cdoy=$( printf '%03d' $doy )

  if [ $rinex = None ];  then
     echo You are using the archive section of the API
     curl  ${heroku}"?station=${station}&year=${year}&doy=${doy}&freq=${freq}&amp=${amp}&h1=${h1}&h2=${h2}&e1=${e1}&e2=${e2}&pk2noise=${pk2noise}&azim1=${azim1}&azim2=${azim2}&jsononly=True" -o out.json --silent
     # this is where the results will be
     cat out.json
     resultnow=`cat  out.json | grep fileAddress | awk '{print substr($2,2,86)}'`
     # this is the status information
     statusnow=`cat  out.json | grep status  | awk '{print $2}' | tr "," " "  | sed 's/"//g' `

     finished=false
     x=20
     while [ "$finished" = false ]
     do
       echo Checking job status. 
       sleep 2
       x=$(( $x - 2 ))
       if [ $x -eq 0 ]; then
         finished=true
         echo time has run out, exiting
       fi
       rm -f tmp.json
       curl ${statusnow} --silent > tmp.json 
       cat tmp.json
       var=`grep "finished" tmp.json | wc -l`
       if [ $var -eq 1 ]; then
         finished=true
         echo the job has finished
         #echo moving daily results to ${station}_${year}_${cdoy}.txt in the output directory
	 echo ${resultnow}
         curl --silent ${resultnow} > tmpfile
      # look for error messages which means data were not found
         var2=`grep "Error" tmpfile | wc -l`

         if [ $var2 -eq 0 ]; then
	    echo API for year $year and day of year $doy seems to have worked, ${outputdir}/${station}/${year}/${station}_${year}_${cdoy}.txt
            mv tmpfile ${outputdir}/${station}/${year}/${station}_${year}_${cdoy}.txt
	 # make a new combination file
         fi
         rm -f tmpfile
       fi
    done

  else
     if test -f "$rinex"; then
        echo "The RINEX file exists. Uploading."
     else
        echo "The RINEX file you submitted does not exist. Exiting."
	exit
     fi
     curl --silent -F "file=@${rinex}" -F "jsononly=True" -F "azim1=${azim1}" -F "azim2=${azim2}" -F "freq=${freq}" -F "h1=${h1}" -F "h2=${h2}" -F "e1=${e1}" -F "e2=${e2}" -F "pk2noise=${pk2noise}" -F "amp=${amp}" ${heroku0} -o out.json
     error3=`grep errormessage out.json | wc -l`
     if [ $error3 -eq 1 ]; then
	 echo problem with your file
	 cat out.json
	 exit
     fi
     resultnow=`cat  out.json | grep fileAddress | awk '{print substr($2,2,86)}'`
     curl --silent $resultnow > tmpfile
     mv tmpfile ${outputdir}/${station}/${year}/${station}_${year}_${cdoy}.txt
     echo Results stored in ${outputdir}/${station}/${year}/${station}_${year}_${cdoy}.txt

  fi
  doy=$(( $doy + 1 ))

done     # end of doy while loop

rm -f ${comboFile}
echo Combine the results into one file 
echo \# https://gnss-reflections.org > ${comboFile}
echo \# Year,DayOfYear,ReflectorHeight\(m\),Month,Day,RHsigma  >> ${comboFile}
cat ${outputdir}/${station}/????/*.txt | grep DailyAverage | awk '{print $3"," $4"," $5"," $6"," $7",0"}' >> ${comboFile}


echo Daily averages are stored here: ${comboFile}
echo Output directory ${outputdir}
# clean up
rm -f out.json
rm -f tmp.json
